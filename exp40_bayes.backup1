clear all
close all
clc


addpath('~/projects/matrix/common/');
addpath('./function/');
addpath('./old/');



fg_pa = '../detection/random_epoch/highway_60/';
fg_ft = 'png';


gt_pa = '~/dataset/dataset2014/dataset/baseline/highway/groundtruth/';
gt_ft = 'png';

im_pa = '~/dataset/dataset2014/dataset/baseline/highway/input/';
im_ft = 'jpg';


[files_im fullfiles_im] = loadFiles_plus(im_pa, im_ft);
[files_fg fullfiles_fg] = loadFiles_plus(fg_pa, fg_ft);
[files_gt fullfiles_gt] = loadFiles_plus(gt_pa, gt_ft);


idx = 1550;


im = double(imread(fullfiles_im{idx}));
gt = double(imread(fullfiles_gt{idx}));
fg = double(imread(fullfiles_fg{idx}));


left = 160;
top  = 1;
right = 300;
bottom = 80;

im = im(top:bottom, left:right, :);
gt = gt(top:bottom, left:right, :);
fg = fg(top:bottom, left:right, :);







global g_displayMatrixImage
g_displayMatrixImage = 1;

displayMatrixImage(1,1,3, im, fg, gt)
oldfg = fg;

for i = 1:100
    fg = bayesRefine(im, fg, 4, 1);
    
    sum(sum(fg == 255))

    showim = emphImage_byMask(im, fg, [140 101 100], 0.7);

    displayMatrixImage(i, 2, 3, im, oldfg, showim,  fg, gt, showim)
end


function re_fg = bayesRefine(im, fgim, radius, rate)

if nargin == 2
    radius = 4;
    rate = 0.6;
end

if nargin == 3
    rate = 0.6;
end

impos = img2pos(im);

[L A B] = rgb2lab(im(:, :, 1), im(:, :, 2), im(:, :, 3));


[row column byte] = size(im);

features = zeros(row, column, 5);


%features(:, :, 1:3) = im;


L = L - min(min(L));
A = A - min(min(A));
B = B - min(min(B));


features(:, :, 1) = L;
features(:, :, 2) = A;

features(:, :, 3) = B;
features(:, :, 4:5) = impos;

% features(:, :, 4) = L;
% fearures(:, :, 5) = A;

% max(max(A))
% min(min(A))
% 
% max(max(B))
% max(max(B))
% 
% 
% 
% input('pause in the LAB')

[row_f column_f byte_f] = size(features);


ex_feats = padarray(features, [radius radius], 'symmetric');
ex_label = padarray(fgim, [radius radius], 'symmetric');
ex_image = padarray(im, [radius radius], 'symmetric');

% normalize each dimension of features
% for i = 1:byte_f
%     temp = ex_feats(:, :, i);
% 
%     maxvalue = max(max(temp));
%     temp = temp ./ maxvalue;
% 
%     ex_feats(:, :, i) = temp;
% end


% 
% % normalize the magnitude of each feature vector
% len_feats = ex_feats .* ex_feats;
% len_feats = sum(len_feats, 3);
% len_feats = len_feats .^ (0.5);
% 
% for i = 1:byte_f
%     temp = ex_feats(:, :, i);
% 
%     temp = temp ./ len_feats;
% 
%     ex_feats(:, :, i) = temp;
% end

% covert all 0 to 1
idx = ex_feats == 0;
ex_feats(idx) = 1;


num_feats = radius*2 + 1;
num_feats = num_feats^2;

store_label = ex_label;

% for i = 1 + radius:row_f + radius
%     for j = 1 + radius:column_f + radius

for i = 36:40
    for j = 40:50
        entim = ex_feats(i - radius:i + radius, j - radius:j + radius, :);
        pixel = ex_feats(i, j, :);
        pixel = squeeze(pixel)';

        label = ex_label(i - radius:i + radius, j - radius:j + radius, :);


        vec_im = reshape(entim, num_feats, byte_f);
        vec_lb = reshape(label, num_feats, 1);


        midpos = round(num_feats/2);
        vec_im = vec_im([1:midpos - 1, midpos + 1:end], :);
        vec_lb = vec_lb([1:midpos - 1, midpos + 1:end], 1);


        idx0 = vec_lb == 0;
        idx1 = vec_lb == 255;

        similars = vec_im ./ pixel;

        idx = similars > 1;
        similars(idx) = 1 ./ similars(idx);

        similars = prod(similars, 2);

        PX_0 = mean(similars(idx0));
        PX_1 = mean(similars(idx1));

        if isnan(PX_0) == 1
            PX_0 = 0;
        end

        if isnan(PX_1) == 1
            PX_1 = 0;
        end

        P0 = sum(idx0)/(sum(idx0) + sum(idx1));
        P1 = sum(idx1)/(sum(idx0) + sum(idx1));

        P0_X = PX_0 * P0;
        P1_X = PX_1 * P1;
        
%        P0_X = PX_0;
%        P1_X = PX_1;

        if isnan(P0) == 1
            P0 = 0;
        end

        if isnan(P1) == 1
            P1 = 0;
        end

        store_label(i,j) = (P1_X > rate*P0_X)*255;

        % left top right bottom
%        showim = drawRect(im,   [j - radius + 2 j + radius - 2 i - radius + 2 i + radius - 2]);
%        showfg = drawRect(ex_label, [j - radius + 2 j + radius - 2 i - radius + 2 i + radius - 2]);
        
        showim = drawRect_plus(ex_image, [j - radius i - radius j + radius i + radius], 2, [255 100 100]);
        showfg = drawRect_plus(ex_label, [j - radius i - radius j + radius i + radius], 2, [255 100 100]);
        showre = drawRect_plus(store_label, [j - radius i - radius j + radius i + radius], 2, [255 100 100]);
        
        rectim = ex_image(i - radius:i + radius, j - radius:j + radius, :);
        currim = ex_image(i, j, :);
        temp = ex_image;
        temp(i, j, 1) = 255;
        temp(i, j ,2) = 0;
        temp(i, j ,3) = 0;
        currpt = temp(i - radius:i + radius, j - radius:j + radius, :);
        emphmk = ex_label(i - radius:i + radius, j - radius:j + radius, :);
        currpt_em = emphImage_byMask(currpt, emphmk, [140 101 100], 0.7);

        [row_t column_t byte_t] = size(emphmk);
        clremphmk = zeros(row_t, column_t, 3);

        clremphmk(:, :, 1) = emphmk;
        clremphmk(:, :, 2) = emphmk;
        clremphmk(:, :, 3) = emphmk;
        clremphmk(radius + 1, radius + 1, 1) = 255;
        clremphmk(radius + 1, radius + 1, 2) = 0;
        clremphmk(radius + 1, radius + 1, 3) = 0;





        showim(i, j, 1) = 255;
        showim(i, j, 2) = 0;
        showim(i, j, 3) = 0;

        

 
        displayMatrixImage(i, 3, 3, showim, showfg, showre, rectim, currim,currpt, currpt_em, clremphmk, emphmk)

        PX_0
        PX_1
        P0
        P1
        P0_X
        P1_X
        (P1_X > rate*P0_X)*255
        pixel
        input('pause')

%        [i j]
% 
%         if PX_0 < 0
%             global g_similars
%             g_similars = similars
%             
%             global g_ex_feats
%             g_ex_feats = ex_feats
% 
%             ex_feats
% 
%             input('pause in the global')
%         end
% 
% %        input('pause')
% 
%         PX_0
%         PX_1
%         P0
%         P1
%         P0_X
%         P1_X
%         (P1_X > rate*P0_X)

%        input('pause')

    end
%    showSchedule(i, row_f + radius, 'bayesRefine');
end


store_label = store_label(1 + radius:row_f + radius, 1 + radius:column_f + radius );

re_fg = store_label;

end
